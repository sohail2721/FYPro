@page "/AssignTasks"
@using FYPro.Shared
@inject HttpClient http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsr

<h3 class="font-weight-bold display-4">Assigned Tasks</h3>

@if (assignedTasks == null)
{
    <p><em>Loading assigned tasks...</em> <i class="fas fa-spinner fa-spin"></i></p>
}
else if (assignedTasks.Count == 0)
{
    <p>No tasks have been assigned by you yet.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Task Name</th>
                <th>Description</th>
                <th>Status</th>
                <th>Assigned To</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in assignedTasks)
            {
                <tr>
                    <td>@task.TaskName</td>
                    <td>@task.Description</td>
                    <td>@task.Status</td>
                    <td>@task.AssignedTo</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="mt-5">
    <h3 class="font-weight-bold display-4">Assign a New Task</h3>
</div>

@if (projects == null)
{
    <p><em>Loading projects...</em> <i class="fas fa-circle-notch fa-spin"></i></p>
}
else if (projects.Count == 0)
{
    <p>No projects available for assignment.</p>
}
else
{
    <div class="mb-3">
        <label for="projectSelect" class="form-label"><h4>Select Project:</h4></label>
        <select id="projectSelect" class="form-select" @bind-value="selectedProjectId" @bind-value:event="onchange">
            @foreach (var project in projects)
            {
                <option value="@project.ProjectID">@project.ProjectName</option>
            }
        </select>


    </div>

    @if (students == null)
    {
        <p><em>Loading students...</em> <i class="fas fa-spinner fa-spin"></i></p>
    }
    else if (students.Count == 0)
    {
        <p>No students available for assignment.</p>
    }
    else
    {
        <div class="mb-3">
            <label for="studentSelect" class="form-label">Select Student:</label>
            <select id="studentSelect" class="form-select" @onchange="OnStudentSelected">
                @foreach (var student in students)
                {
                    <option value="@student.UserID">@student.FirstName @student.LastName</option>
                }
            </select>
            <div class="mt-2">
                <p>@(selectedStudentName ?? "No student selected")</p>
            </div>
        </div>
    }
}

@if (selectedProjectId > 0 && students?.Count > 0)
{
    <EditForm Model="@newTask" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="taskName" class="form-label">Task Name:</label>
            <InputText id="taskName" class="form-control" @bind-Value="newTask.TaskName" />
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Task Description:</label>
            <InputTextArea id="description" class="form-control" @bind-Value="newTask.Description" />
        </div>
        <div class="mb-3">
            <label for="status" class="form-label">Status:</label>
            <InputSelect id="status" class="form-select" @bind-Value="newTask.Status">
                <option value="Pending">Pending</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
            </InputSelect>
        </div>
        <button type="button" class="btn btn-info" @onclick="PreviewTask">Preview Task</button>
        <button type="submit" class="btn btn-primary">Assign Task</button>

    </EditForm>
}

@if (!string.IsNullOrWhiteSpace(previewTaskData))
{
    <div class="alert alert-secondary mt-2">
        <h5>Task Preview:</h5>
        <pre>@previewTaskData</pre>
    </div>
}

@if (!string.IsNullOrWhiteSpace(statusMessage))
{
    <div class="alert @statusClass">@statusMessage</div>
}

@code {
    private List<TaskModel> assignedTasks;
    private List<ProjectModel> projects; // Assuming you have a ProjectModel
    private List<StudentModel> students; // Assuming you have a StudentModel
    private int selectedProjectId;
    //private string selectedStudentId;
    //private string selectedStudentName = string.Empty; // Initialize to an empty string to avoid null
    private string selectedStudentId = string.Empty;
    private string selectedStudentName = "Select a student";
    private string currentUserName = string.Empty;
    // private TaskModel newTask = new TaskModel();
    private string facultyNumber; // To store the logged-in faculty number
    private string statusMessage = "";
    private string statusClass = "";
    private string selectedStudentRollNumber = "21i-0500";
    private string previewTaskData;


    private TaskModel newTask = new TaskModel
    {
        TaskName = string.Empty,
        Description = string.Empty,
        Status = "Pending", 
        AssignedTo = string.Empty,
        AssignedBy = string.Empty,
    };

    // Helper class to parse the response
    private class ApiResponse
    {
        public string Message { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserName = authState.User.Identity.Name;
        facultyNumber = await jsr.InvokeAsync<string>("localStorage.getItem", "facultyNumber");
        await LoadAssignedTasks();
        await LoadProjects();
    }

    private async Task LoadAssignedTasks()
    {
        assignedTasks = await http.GetFromJsonAsync<List<TaskModel>>($"api/Supervisor/GetAssignedTasks/{currentUserName}");
    }

    private async Task LoadProjects()
    {
        string facultyNumber = await jsr.InvokeAsync<string>("localStorage.getItem", "facultyNumber");
        projects = await http.GetFromJsonAsync<List<ProjectModel>>($"api/Supervisor/GetProjectsByFacultyNumber/{facultyNumber}");
    }

    // Add a method to load students for the selected project
    private async Task LoadStudents(int projectId)
    {
        try
        {
            students = await http.GetFromJsonAsync<List<StudentModel>>($"api/Supervisor/GetStudentsByProjectId/{projectId}");
            if (students == null || students.Count == 0)
            {
                students = new List<StudentModel>();
                Console.WriteLine("No students found for the selected project.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading students: {ex.Message}");
        }
    }

    // private async Task OnProjectSelectionChanged(ChangeEventArgs e)
    // {
    //     if (int.TryParse(e.Value?.ToString(), out int projectId))
    //     {
    //         selectedProjectId = projectId;
    //         await LoadStudents(selectedProjectId);
    //     }
    //     else
    //     {
    //         // Handle the case where conversion fails
    //         Console.WriteLine("ProjectID string to int conversion failed.");
    //     }
    // }

    private async Task OnProjectSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int projectId))
        {
            selectedProjectId = projectId;
            // Update the task model with the selected project ID
            newTask.ProjectID = selectedProjectId;
            await LoadStudents(selectedProjectId);
            Console.WriteLine($"Selected Project ID: {selectedProjectId}");
        }
        else
        {
            // Log the error or handle it as required
            Console.WriteLine("Failed to parse the selected project ID.");
        }
    }


    private void OnStudentSelected(ChangeEventArgs e)
    {
        selectedStudentId = e.Value.ToString();
        var student = students.FirstOrDefault(s => s.UserID == selectedStudentId);
        if (student != null)
        {
            selectedStudentName = student.FirstName + " " + student.LastName;
        }
        else
        {
            selectedStudentName = string.Empty;
            Console.WriteLine("Selected Student Name Empty String.");
        }

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (selectedProjectId <= 0)
        {
            statusMessage = "Please select a project.";
            statusClass = "alert-warning";
            return;
        }
        
        newTask.ProjectID = selectedProjectId;
        newTask.AssignedTo = selectedStudentRollNumber;
        newTask.AssignedBy = facultyNumber; // Set the logged-in faculty's number

        await http.PostAsJsonAsync($"api/Supervisor/AssignTask", newTask);

        var response = await http.PostAsJsonAsync("api/Supervisor/AssignTask", newTask);
        var responseContent = await response.Content.ReadFromJsonAsync<ApiResponse>();

        if (response.IsSuccessStatusCode)
        {
            statusMessage = responseContent?.Message ?? "Task successfully assigned.";
            statusClass = "alert-success"; // This is a class for styling success messages
        }
        else
        {
            statusMessage = responseContent?.Message ?? "Failed to assign task.";
            statusClass = "alert-danger"; // This is a class for styling error messages
        }

        StateHasChanged();

    }

    private void PreviewTask()
    {
        previewTaskData = $"Project ID: {newTask.ProjectID}\n" +
                          $"Task Name: {newTask.TaskName}\n" +
                          $"Description: {newTask.Description}\n" +
                          $"Status: {newTask.Status}\n" +
                          $"Assigned To (Roll Number): {selectedStudentRollNumber}\n" +
                          $"Assigned By (Faculty Number): {facultyNumber}";

        // For visual feedback
        StateHasChanged();
    }

}
