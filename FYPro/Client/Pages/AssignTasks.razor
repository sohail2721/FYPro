@page "/AssignTasks"
@using FYPro.Shared
@inject HttpClient http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsr

<h3>Assigned Tasks</h3>

@if (assignedTasks == null)
{
    <p><em>Loading assigned tasks...</em></p>
}
else if (assignedTasks.Count == 0)
{
    <p>No tasks have been assigned by you yet.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Task Name</th>
                <th>Description</th>
                <th>Status</th>
                <th>Assigned To</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in assignedTasks)
            {
                <tr>
                    <td>@task.TaskName</td>
                    <td>@task.Description</td>
                    <td>@task.Status</td>
                    <td>@task.AssignedTo</td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Assign Tasks</h3>

@if (projects == null)
{
    <p><em>Loading projects...</em></p>
}
else if (projects.Count == 0)
{
    <p>No projects available for assignment.</p>
}
else
{
    <h4>Select Project:</h4>
    <select value="@selectedProjectId" @onchange="OnProjectSelectionChanged">
        @foreach (var project in projects)
        {
            <option value="@project.ProjectID">@project.ProjectName</option>
        }
    </select>

}
@if (students == null)
{
    <p><em>Loading students...</em></p>
}
else if (students.Count == 0)
{
    <p>No students available for assignment.</p>
}
else
{
    @* <select @bind-value="selectedStudentId" @bind-value:event="onchange">
            @foreach (var student in students)
            {
                <option value="@student.UserID">@student.FirstName @student.LastName</option>
            }
        </select> *@

    <select @onchange="OnStudentSelected">
        @foreach (var student in students)
        {
            <option value="@student.UserID">@student.FirstName @student.LastName</option>
        }
    </select>

    <p>Selected Student: @selectedStudentName</p>


    //<button @onclick="AssignTask">Assign Task</button>
}

@code {
    private List<TaskModel> assignedTasks;
    private List<ProjectModel> projects; // Assuming you have a ProjectModel
    private List<StudentModel> students; // Assuming you have a StudentModel
    private int selectedProjectId;
    private string selectedStudentId;
    private string selectedStudentName;
    private string currentUserName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserName = authState.User.Identity.Name;
        await LoadAssignedTasks();
        await LoadProjects();
        // await LoadProjectsAndStudents();
    }

    private async Task LoadAssignedTasks()
    {
        assignedTasks = await http.GetFromJsonAsync<List<TaskModel>>($"api/Supervisor/GetAssignedTasks/{currentUserName}");
    }

    private async Task LoadProjects()
    {
        string facultyNumber = await jsr.InvokeAsync<string>("localStorage.getItem", "facultyNumber");
        projects = await http.GetFromJsonAsync<List<ProjectModel>>($"api/Supervisor/GetProjectsByFacultyNumber/{facultyNumber}");
    }

    // Add a method to load students for the selected project
    private async Task LoadStudents(int projectId)
    {
        try
        {
            students = await http.GetFromJsonAsync<List<StudentModel>>($"api/Supervisor/GetStudentsByProjectId/{projectId}");
            if (students == null || students.Count == 0)
            {
                // Optionally initialize students to an empty list here to avoid null reference issues elsewhere
                students = new List<StudentModel>();
                Console.WriteLine("No students found for the selected project.");
                // Optionally show an error message to the user here
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading students: {ex.Message}");
            // Optionally show an error message to the user here
        }
    }

    private async Task OnProjectSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int projectId))
        {
            selectedProjectId = projectId;
            await LoadStudents(selectedProjectId);
        }
        else
        {
            // Handle the case where conversion fails
            Console.WriteLine("ProjectID string to int conversion failed.");
        }
    }

    // private void OnStudentSelected(ChangeEventArgs e)
    // {
    //     var studentIdAsString = e.Value.ToString(); // UserID is a string in StudentModel
    //     selectedStudentId = studentIdAsString; // Set selectedStudentId as a string
    //     var student = students.FirstOrDefault(s => s.UserID == studentIdAsString);
    //     if (student != null)
    //     {
    //         selectedStudentName = student.FirstName + " " + student.LastName;
    //     }
    //     else
    //     {
    //         selectedStudentName = string.Empty;
    //     }

    //     StateHasChanged();
    // }

    private void OnStudentSelected(ChangeEventArgs e)
    {
        selectedStudentId = e.Value.ToString();
        var student = students.FirstOrDefault(s => s.UserID == selectedStudentId);
        if (student != null)
        {
            selectedStudentName = student.FirstName + " " + student.LastName;
        }
        else
        {
            selectedStudentName = string.Empty;
            Console.WriteLine("Selected Student Name Empty String.");
        }

        StateHasChanged();
    }



}
