@page "/AssignTasks"
@using FYPro.Shared
@inject HttpClient http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsr

<h3>Assigned Tasks</h3>

@if (assignedTasks == null)
{
    <p><em>Loading assigned tasks...</em></p>
}
else if (assignedTasks.Count == 0)
{
    <p>No tasks have been assigned by you yet.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Task Name</th>
                <th>Description</th>
                <th>Status</th>
                <th>Assigned To</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in assignedTasks)
            {
                <tr>
                    <td>@task.TaskName</td>
                    <td>@task.Description</td>
                    <td>@task.Status</td>
                    <td>@task.AssignedTo</td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Assign Tasks</h3>

@if (projects == null)
{
    <p><em>Loading projects...</em></p>
}
else if (projects.Count == 0)
{
    <p>No projects available for assignment.</p>
}
else
{
    <h4>Select Project:</h4>
    <select value="@selectedProjectId" @onchange="OnProjectSelectionChanged">
        @foreach (var project in projects)
        {
            <option value="@project.ProjectID">@project.ProjectName</option>
        }
    </select>

    @if (students == null)
    {
        <p><em>Loading students...</em></p>
    }
    else if (students.Count == 0)
    {
        <p>No students available for assignment.</p>
    }
    else
    {
        @* <select @bind-value="selectedStudentId" @bind-value:event="onchange">
            @foreach (var student in students)
            {
                <option value="@student.UserID">@student.FirstName @student.LastName</option>
            }
        </select> *@

        <select @onchange="OnStudentSelected">
            @foreach (var student in students)
            {
                <option value="@student.UserID">@student.FirstName @student.LastName</option>
            }
        </select>

        <p>@(selectedStudentName ?? "No student selected")</p>

    }

}

@if (selectedProjectId > 0)
{
    @if (students == null)
    {
        <p><em>Waiting for student data to load...</em></p>
    }
    else if (students.Count == 0)
    {
        <p>No students available for this project.</p>
    }
    else
    {
        <EditForm Model="@newTask" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <h4>Assign Task to Selected Student:</h4>
            <p>@selectedStudentName</p>

            <label for="taskName">Task Name:</label>
            <InputText id="taskName" @bind-Value="newTask.TaskName" />

            <label for="description">Task Description:</label>
            <InputTextArea id="description" @bind-Value="newTask.Description" />

            <label for="status">Status:</label>
            <InputSelect id="status" @bind-Value="newTask.Status">
                <option value="Pending">Pending</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
            </InputSelect>

            <button type="submit">Assign Task</button>
        </EditForm>
    }
}

@if (!string.IsNullOrWhiteSpace(statusMessage))
{
    <div class="alert @statusClass">@statusMessage</div>
}

@code {
    private List<TaskModel> assignedTasks;
    private List<ProjectModel> projects; // Assuming you have a ProjectModel
    private List<StudentModel> students; // Assuming you have a StudentModel
    private int selectedProjectId;
    //private string selectedStudentId;
    //private string selectedStudentName = string.Empty; // Initialize to an empty string to avoid null
    private string selectedStudentId = string.Empty;
    private string selectedStudentName = "Select a student";
    private string currentUserName = string.Empty;
    // private TaskModel newTask = new TaskModel();
    private string facultyNumber; // To store the logged-in faculty number
    private string statusMessage = "";
    private string statusClass = "";
    private string selectedStudentRollNumber = "21i-0500";

    private TaskModel newTask = new TaskModel
    {
        TaskName = string.Empty,
        Description = string.Empty,
        Status = "Pending", 
        AssignedTo = string.Empty,
        AssignedBy = string.Empty,
    };

    private async Task HandleValidSubmit()
    {
        newTask.ProjectID = selectedProjectId;
        newTask.AssignedTo = selectedStudentRollNumber;
        newTask.AssignedBy = facultyNumber; // Set the logged-in faculty's number

        await http.PostAsJsonAsync($"api/Supervisor/AssignTask", newTask);
        
        var response = await http.PostAsJsonAsync("api/Supervisor/AssignTask", newTask);
        var responseContent = await response.Content.ReadFromJsonAsync<ApiResponse>();

        if (response.IsSuccessStatusCode)
        {
            statusMessage = responseContent?.Message ?? "Task successfully assigned.";
            statusClass = "alert-success"; // This is a class for styling success messages
        }
        else
        {
            statusMessage = responseContent?.Message ?? "Failed to assign task.";
            statusClass = "alert-danger"; // This is a class for styling error messages
        }

        StateHasChanged();

    }

    // Helper class to parse the response
    private class ApiResponse
    {
        public string Message { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserName = authState.User.Identity.Name;
        facultyNumber = await jsr.InvokeAsync<string>("localStorage.getItem", "facultyNumber");
        await LoadAssignedTasks();
        await LoadProjects();
    }

    private async Task LoadAssignedTasks()
    {
        assignedTasks = await http.GetFromJsonAsync<List<TaskModel>>($"api/Supervisor/GetAssignedTasks/{currentUserName}");
    }

    private async Task LoadProjects()
    {
        string facultyNumber = await jsr.InvokeAsync<string>("localStorage.getItem", "facultyNumber");
        projects = await http.GetFromJsonAsync<List<ProjectModel>>($"api/Supervisor/GetProjectsByFacultyNumber/{facultyNumber}");
    }

    // Add a method to load students for the selected project
    private async Task LoadStudents(int projectId)
    {
        try
        {
            students = await http.GetFromJsonAsync<List<StudentModel>>($"api/Supervisor/GetStudentsByProjectId/{projectId}");
            if (students == null || students.Count == 0)
            {
                students = new List<StudentModel>();
                Console.WriteLine("No students found for the selected project.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading students: {ex.Message}");
        }
    }

    private async Task OnProjectSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int projectId))
        {
            selectedProjectId = projectId;
            await LoadStudents(selectedProjectId);
        }
        else
        {
            // Handle the case where conversion fails
            Console.WriteLine("ProjectID string to int conversion failed.");
        }
    }

    private void OnStudentSelected(ChangeEventArgs e)
    {
        selectedStudentId = e.Value.ToString();
        var student = students.FirstOrDefault(s => s.UserID == selectedStudentId);
        if (student != null)
        {
            selectedStudentName = student.FirstName + " " + student.LastName;
        }
        else
        {
            selectedStudentName = string.Empty;
            Console.WriteLine("Selected Student Name Empty String.");
        }

        StateHasChanged();
    }

}
