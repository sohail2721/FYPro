@page "/ViewAssignedTasksStudents"
@using Microsoft.AspNetCore.Components.Authorization
@using FYPro.Shared
@using System.Globalization;
@using MudBlazor
@inject AuthenticationStateProvider authstate
@inject HttpClient http
@inject IJSRuntime jsr
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Student Tasks</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f4f4f4;
            }

            .container {
                max-width: 800px;
                margin: 20px auto;
                padding: 20px;
                background-color: #fff;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }

            h2 {
                color: #333;
                text-align: center;
            }

            table {
                width: 100%;
                border-collapse: collapse;
            }

            th, td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }

            th {
                background-color: #f2f2f2;
            }

            .complete-checkbox {
                display: inline-block;
                width: 20px;
                height: 20px;
            }

                .complete-checkbox:checked {
                    background-color: #4CAF50;
                }
        </style>
    </head>
    <body>

        <div class="container">

            <h2>Student Tasks</h2>

            <table>
                <thead>
                    <tr>
                        <th>Project ID</th>
                        <th>Project Name</th>
                        <th>Task Name</th>
                        <th>Description</th>
                      
                        <th>Completion Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in AssignedTasks)
                    {
                            @if (task.Status != "Completed")
                                {
                        <tr>
                            <td>@task.ProjectID</td>
                            <td>@task.ProjectName</td>
                            <td>@task.TaskName</td>
                            <td>@task.Description</td>
                            <td>
                                <select class="status-dropdown" @onchange="(e) => UpdateStatus(e, task.TaskID)">
                                    <option value="Pending">Pending</option>
                                    <option value="In Progress">In Progress</option>
                                    <option value="Completed">Complete</option>
                                </select>
                            </td>

                        </tr>
                                    }
                                }
                </tbody>
            </table>

        </div>

    </body>
</html>
}

@code{
    string currentUserName = string.Empty;
    List<AssignedTaskModelStudents> AssignedTasks = new List<AssignedTaskModelStudents>();
    CompleteTaskModel MarkAsComplete = new CompleteTaskModel();
    SuccessMessageModel check = new SuccessMessageModel();

    protected async override Task OnInitializedAsync()
    {
        ApiRequest.http = http;
        ApiRequest.jsr = jsr;
        //await jsr.InvokeVoidAsync("localStorage.clear");
        var authstates = await authstate.GetAuthenticationStateAsync();
        currentUserName = authstates.User.Identity.Name;
        //Console.WriteLine("UserName: " + currentUserName);
        AssignedTasks = await http.GetFromJsonAsync<List<AssignedTaskModelStudents>>($"api/Student/ViewAssignedTasks/{currentUserName}");

    }
    protected async Task UpdateStatus(ChangeEventArgs e,string TaskID)
    {

        string selectedTaskStatus = e.Value.ToString();
        Console.WriteLine($"Selected Status: {selectedTaskStatus}  Selected ID: {TaskID}");
        MarkAsComplete.TaskID = TaskID;
        MarkAsComplete.Status = selectedTaskStatus;

        check = await ApiRequest.PostRequest<SuccessMessageModel>("api/Student/MarkTaskAsComplete", MarkAsComplete);

    }
}