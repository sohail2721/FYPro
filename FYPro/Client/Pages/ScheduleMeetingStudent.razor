@page "/ScheduleMeetingStudent"
@using Microsoft.AspNetCore.Components.Authorization
@using FYPro.Shared
@using System.Globalization;
@inject AuthenticationStateProvider authstate
@inject HttpClient http
@inject IJSRuntime jsr
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Schedule Meeting</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f7f7f7;
        }

        .container {
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1, h2 {
            text-align: center;
        }

        p {
            text-align: justify;
        }

        form {
            margin-top: 20px;
        }

        label {
            font-weight: bold;
        }

        input[type="date"],
        select,
        input[type="text"] {
            width: calc(100% - 22px); /* Adjusted for padding and border */
            padding: 10px;
            margin: 5px 0 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            display: inline-block;
            box-sizing: border-box; /* Include padding and border in width */
        }

        input[type="submit"] {
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            input[type="submit"]:hover {
                background-color: #0056b3;
            }
    </style>
</head>
<body>
    <div class="container">
        <h1>Schedule Meeting with Supervisor</h1>
        <p>This form allows you to schedule a meeting with your assigned supervisor. Please choose a suitable day and timeslot, and provide any additional information you think is necessary.</p>

        <form action="#">
            <label for="date">Choose a day:</label>
            <input type="date" id="date" name="date" @onchange="UpdateSelectedDate" min="2023-01-01">

            <label for="timeslot">Choose a timeslot:</label>
            <select id="timeslot" name="timeslot" @onchange="UpdateSelectedTime">
                <option value="9:00">9:00</option>
                <option value="10:00">10:00</option>
                <option value="11:00">11:00</option>
                <option value="12:00">12:00</option>
                <option value="13:00">13:00</option>
                <option value="14:00">14:00</option>
                <option value="15:00">15:00</option>
                <option value="16:00">16:00</option>
                <option value="17:00">17:00</option>
            </select>

            <label for="agenda">Meeting Agenda:</label>
            <input type="text" id="agenda" name="agenda" @bind="Agenda" style="width: calc(100% - 22px); padding: 10px; margin: 5px 0 15px; border: 1px solid #ccc; border-radius: 5px; display: inline-block; box-sizing: border-box;">

            @if (SupervisorInfo.Any())
            {
                <h2>Contact Information</h2>
                <p>For any urgent matters or inquiries, you can contact your supervisor using the information below:</p>
                <ul>
                    <li><strong>Name:</strong> @SupervisorInfo[0].FirstName @SupervisorInfo[0].LastName </li>
                    <li><strong>Email:</strong> @SupervisorInfo[0].Email</li>
                    <li><strong>Phone:</strong> @SupervisorInfo[0].PhoneNumber</li>
                </ul>
            }
            <button @onclick="@(e => ScheduleMeeting(e))">Schedule</button>

            <button>View Scheduled meetings</button>
        </form>
    </div>
</body>
</html>


@code{
    string currentUserName = string.Empty;
    DateTime date;
    DateTime meetingDateTime;
    public string formattedDate = string.Empty;
    public string Agenda = string.Empty;
    string timeSlot = string.Empty;
    MeetingModel meetingInfo = new MeetingModel();
    List<StudentModel> studentModel = new List<StudentModel>();
    List<SupervisorModel> SupervisorInfo = new List<SupervisorModel>();
    SuccessMessageModel check = new SuccessMessageModel();
    protected async override Task OnInitializedAsync()
    {
        var authstates = await authstate.GetAuthenticationStateAsync();
        currentUserName = authstates.User.Identity.Name;
        Console.WriteLine("UserName: " + currentUserName);
        studentModel = await http.GetFromJsonAsync<List<StudentModel>>($"api/Student/GetStudentInfo/{currentUserName}");
        SupervisorInfo = await http.GetFromJsonAsync<List<SupervisorModel>>($"api/Student/GetSupervisorInfoForMeeting/{studentModel.ToList()[0].RollNumber}");

    }

    private void UpdateSelectedDate(ChangeEventArgs e)
    {
        formattedDate = DateTime.Parse(e.Value.ToString()).ToString("dd-MMM-yyyy").ToUpper();
        date = DateTime.ParseExact(formattedDate, "dd-MMM-yyyy", CultureInfo.InvariantCulture);
        Console.WriteLine(formattedDate);
    }
    private void UpdateSelectedTime(ChangeEventArgs e)
    {
        timeSlot = DateTime.Parse(e.Value.ToString()).ToString("hh:mm").ToUpper();
        Console.WriteLine(timeSlot);

        meetingDateTime = date.Add(TimeSpan.Parse(timeSlot));

        // Alternatively, if you want to store it as a string
        string meetingDateTimeString = meetingDateTime.ToString("yyyy-MM-dd hh:mm");
        meetingInfo.MeetingDateTime = meetingDateTime;
        meetingInfo.Agenda = Agenda;
        meetingInfo.ProjectID = studentModel.ToList()[0].ProjectID;
        meetingInfo.SupervisorFacultyNumber = SupervisorInfo.ToList()[0].FacultyNumber;
        meetingInfo.RollNumber = studentModel.ToList()[0].RollNumber;
        Console.WriteLine(meetingInfo.ProjectID + meetingInfo.SupervisorFacultyNumber + meetingInfo.RollNumber + meetingInfo.Agenda + meetingInfo.MeetingDateTime);
    }

    protected async Task ScheduleMeeting(MouseEventArgs e)
    {
        meetingInfo.MeetingDateTime = meetingDateTime;
        meetingInfo.Agenda = Agenda;
        meetingInfo.ProjectID = studentModel.ToList()[0].ProjectID;
        meetingInfo.SupervisorFacultyNumber = SupervisorInfo.ToList()[0].FacultyNumber;
        meetingInfo.RollNumber = studentModel.ToList()[0].RollNumber;
        check = await ApiRequest.PostRequest<SuccessMessageModel>("api/Student/ScheduleMeetingWithSupervisor", meetingInfo);
        NavigationManager.NavigateTo($"/StudentHomepage");

    }
    }
