@page "/Login"
@inject HttpClient http
@inject IJSRuntime jsr
@using FYPro.Shared
@inherits LayoutComponentBase
@using MudBlazor
@using OpenQA.Selenium;
@using OpenQA.Selenium.Safari;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.IO
@using System.Text.RegularExpressions

@layout NoLayout
@*@inject ISnackbar Snackbar*@
@inject NavigationManager NavigationManager


<html>
<head>
    <title>Login Page</title>
    <link rel="stylesheet" type="text/css" href="style.css">



</head>
<body>

    <div id="my-alert" style="@($"display: {(showAlert ? "flex" : "none")}; opacity: {(showAlert ? 1 : 0)}")">
        <div class="alert-container">
            <span class="oi oi-warning alert-text"> Invalid Username or Password</span>
            <button class="close-button" @onclick="() => HideAlert()">x</button>
        </div>
    </div>




    <div class="container">
        <div class="left-section">

        </div>
        <div class="right-section">
            <form action="#" method="POST">
                <div class="logo">
                    <img src="LogoOK.png" alt="Logo">
                </div>
                <div class="login-box">
                    <h2>Login</h2>
                    <div class="input-group">
                        <label for="username">Username</label>
                        <input type="text" id="Email" name="Email" required @bind="Email">
                    </div>
                    <div class="input-group">
                        <label for="password">Password</label>
                        <input type="password" id="password" name="password" required @bind="Password">
                    </div>
                    <div class="login-container">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="login-button" OnClick="@HandleLogin">Login</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Dark" Class="login-button" OnClick="@NavigateToSignup">Sign Up</MudButton>
                    </div>
                    <div class="forgot-password">
                        <a href="ResetPassword">Forgot password?</a>
                    </div>
                </div>
            </form>
        </div>
    </div>




</body>

</html>

@code{

    public string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    List<UserModel> LoginData = new List<UserModel>();
    private bool showAlert = false;

    protected async override Task OnInitializedAsync()
    {
        ApiRequest.http = http;
        ApiRequest.jsr = jsr;
        await jsr.InvokeVoidAsync("localStorage.clear");

    }
    private void ShowAlert()
    {
        showAlert = true;
        StateHasChanged();
    }

    private void HideAlert()
    {
        showAlert = false;
        StateHasChanged();
    }

    public static bool ValidateEmail(string email)
    {
        // Check for empty input
        if (string.IsNullOrWhiteSpace(email))
            return false;

        // Check for valid email format using regular expression
        Regex regex = new Regex(@"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$");
        if (!regex.IsMatch(email))
            return false;

        // Check for maximum length
        if (email.Length > 50)
            return false;

        return true;
    }

    public static bool ValidatePassword(string password)
    {
        // Check for empty input
        if (string.IsNullOrWhiteSpace(password))
            return false;

        // Check for minimum length
        if (password.Length < 6)
            return false;

        // Check for maximum length
        if (password.Length > 50)
            return false;



        return true;
    }

    protected async Task HandleLogin()
    {
        //Email = "amir.rehman@nu.edu.pk";
        //Password = "amirrehman123";

        //Email = "akhter.jamil@nu.edu.pk";
        //Password = "akhterjamil123";

        //Email = "i210500@nu.edu.pk";
        //Password = "fareeahnaseem123";

        var i = await http.GetFromJsonAsync<List<int>>($"api/Auth/VerificationUser/{Email}");

        if (i.ToList()[0] > 0)
        {
            LoginData = await http.GetFromJsonAsync<List<UserModel>>($"api/Auth/user/{Email}");
            if (LoginData.ToList()[0].Email == Email & LoginData.ToList()[0].Password == Password)
            {
                Console.WriteLine("Login Successful!");
                await jsr.InvokeVoidAsync("localStorage.setItem", "user", LoginData.ToList()[0].jwtbearer).ConfigureAwait(false);

                if (LoginData.ToList()[0].UserType == "Student")
                {
                    NavigationManager.NavigateTo($"/StudentHomepage");
                }
                else if (LoginData.ToList()[0].UserType == "Administrator")
                {
                    NavigationManager.NavigateTo($"/AdminHomepage");
                }
                else if (LoginData.ToList()[0].UserType == "Supervisor")
                {

                    NavigationManager.NavigateTo($"/SupervisorHomepage");
                }
            }
            else if(!ValidateEmail(Email) || !ValidatePassword(Password))
            {
                ShowAlert();
                await Task.Delay(5000);
                HideAlert();
            }
            else
            {
                Console.WriteLine("Invalid");
                ShowAlert();
                await Task.Delay(5000);
                HideAlert();
            }
        }
        else
        {
            Console.WriteLine("User Doesn't Exists");
            ShowAlert();
            await Task.Delay(5000);
            HideAlert();
        }

    }

    public void NavigateToSignup()
    {
        NavigationManager.NavigateTo($"/Signup");
    }

}